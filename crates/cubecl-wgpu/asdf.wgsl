

@group(0)
@binding(0)
var<storage, read_write> buffer_0_global: array<vec4<f32>>;

@group(0)
@binding(1)
var<storage, read_write> buffer_1_global: array<vec4<f32>>;

@group(0)
@binding(2)
var<storage, read_write> buffer_2_global: array<vec4<f32>>;

@group(0)
@binding(3)
var<storage, read_write> info: array<u32>;

@group(0)
@binding(4)
var<storage, read_write> scalars_u32: array<u32, 1>;

var<workgroup> shared_memory_24: array<vec4<f32>, 64>;

var<workgroup> shared_memory_40: array<vec4<f32>, 64>;

var<workgroup> shared_memory_1365: array<vec4<f32>, 64>;

const WORKGROUP_SIZE_X = 32u;
const WORKGROUP_SIZE_Y = 1u;
const WORKGROUP_SIZE_Z = 1u;

@compute
@workgroup_size(32, 1, 1)
fn matmul_f32_f32_f32_f32(
    @builtin(local_invocation_id) local_invocation_id: vec3<u32>,
    @builtin(workgroup_id) workgroup_id: vec3<u32>,
) {
var a_2: array<f32, 8>;

var a_76: array<f32, 16>;

var a_77: array<f32, 8>;

var l_mut_10: u32;
var l_mut_11: u32;
var l_mut_34: u32;
var l_mut_35: u32;
var l_mut_36: u32;
var l_mut_37: u32;
var l_mut_38: u32;
var l_mut_39: u32;
var l_mut_50: u32;
var l_mut_51: u32;
var l_mut_52: u32;
var l_mut_53: u32;
var l_mut_54: u32;
var l_mut_55: u32;
var l_mut_65: u32;
var l_mut_66: u32;
var l_mut_67: u32;
var l_mut_68: u32;
var l_mut_69: u32;
var l_mut_70: u32;
var l_mut_71: u32;
var l_mut_84: u32;
var l_mut_85: u32;
var l_mut_86: u32;
var l_mut_87: u32;
var l_mut_88: u32;
var l_mut_89: u32;
var l_mut_90: u32;
var l_mut_91: u32;
var l_mut_1374: vec4<f32>;
let l_0 = workgroup_id.y * 16u;
let l_1 = workgroup_id.x * 16u;
let l_3 = info[8u];
let l_4 = l_3 - 2u;
let l_5 = info[info[14u] + l_4];
let l_6 = workgroup_id.z * l_5;
let l_7 = l_3 - 2u;
let l_8 = info[info[11u] + l_7];
let l_9 = l_6 * l_8;
l_mut_10 = 0u;
l_mut_11 = 0u;
let l_12 = l_3 - 2u;

for (var l_mut_13: u32 = 0u; l_mut_13 < l_12; l_mut_13++) {
let l_14 = info[info[14u] + l_mut_13];
let l_15 = l_9 / l_14;
let l_16 = info[info[9u] + l_mut_13];
let l_17 = l_15 % l_16;
let l_18 = info[info[12u] + l_mut_13];
let l_19 = l_17 * l_18;
l_mut_10 = l_mut_10 + l_19;
let l_20 = info[info[10u] + l_mut_13];
let l_21 = l_15 % l_20;
let l_22 = info[info[13u] + l_mut_13];
let l_23 = l_21 * l_22;
l_mut_11 = l_mut_11 + l_23;
}
let l_25 = info[6u];
let l_26 = l_25 - 2u;
let l_27 = info[info[12u] + l_26];
let l_28 = l_25 - 1u;
let l_29 = info[info[12u] + l_28];
let l_30 = l_25 - 2u;
let l_31 = info[info[9u] + l_30];
let l_32 = l_25 - 1u;
let l_33 = info[info[9u] + l_32];
l_mut_34 = l_0;
l_mut_35 = 0u;
l_mut_36 = l_27;
l_mut_37 = l_29;
l_mut_38 = l_31;
l_mut_39 = l_33;
let l_41 = info[7u];
let l_42 = l_41 - 2u;
let l_43 = info[info[13u] + l_42];
let l_44 = l_41 - 1u;
let l_45 = info[info[13u] + l_44];
let l_46 = l_41 - 2u;
let l_47 = info[info[10u] + l_46];
let l_48 = l_41 - 1u;
let l_49 = info[info[10u] + l_48];
l_mut_50 = 0u;
l_mut_51 = l_1;
l_mut_52 = l_43;
l_mut_53 = l_45;
l_mut_54 = l_47;
l_mut_55 = l_49;
let l_56 = info[8u];
let l_57 = l_56 - 2u;
let l_58 = info[info[14u] + l_57];
let l_59 = l_56 - 1u;
let l_60 = info[info[14u] + l_59];
let l_61 = l_56 - 2u;
let l_62 = info[info[11u] + l_61];
let l_63 = l_56 - 1u;
let l_64 = info[info[11u] + l_63];
l_mut_65 = l_0;
l_mut_66 = l_1;
l_mut_67 = l_58;
l_mut_68 = l_60;
l_mut_69 = l_62;
l_mut_70 = l_64;
l_mut_71 = l_9;
let l_72 = scalars_u32[0] - 0u;
let l_73 = l_72 + 16u;
let l_74 = l_73 - 1u;
let l_75 = l_74 / 16u;
a_2[0u] = 0f;
a_2[1u] = 0f;
a_2[2u] = 0f;
a_2[3u] = 0f;
a_2[4u] = 0f;
a_2[5u] = 0f;
a_2[6u] = 0f;
a_2[7u] = 0f;

for (var l_mut_79: u32 = 0u; l_mut_79 < l_75; l_mut_79++) {
workgroupBarrier();
let l_80 = local_invocation_id.y * 32u;
let l_81 = l_80 + local_invocation_id.x;
let l_82 = l_81 * 4u;

for (var l_mut_83: u32 = 0u; l_mut_83 < 2u; l_mut_83++) {
l_mut_84 = l_82;
l_mut_85 = l_mut_34;
l_mut_86 = l_mut_35;
l_mut_87 = l_mut_36;
l_mut_88 = l_mut_37;
l_mut_89 = l_mut_38;
l_mut_90 = l_mut_39;
l_mut_91 = l_mut_10;
}

for (var l_mut_92: u32 = 0u; l_mut_92 < 1u; l_mut_92++) {
let l_93 = 0u * 128u;
let l_94 = l_mut_84 + l_93;
let l_95 = l_94 / 256u;
let l_96 = l_94 % 256u;
let l_97 = l_95 % 1u;
let l_98 = l_95 / 1u;
let l_99 = l_97 * 16u;
let l_100 = l_98 * 16u;
let l_101 = l_96 % 16u;
let l_102 = l_96 / 16u;
let l_103 = l_101 + l_99;
let l_104 = l_102 + l_100;
let l_105 = l_103 + l_mut_85;
let l_106 = l_104 + l_mut_86;
let l_107 = l_105 * l_mut_87;
let l_108 = l_106 * l_mut_88;
let l_109 = l_107 + l_108;
let l_110 = l_109 + l_mut_91;
let l_111 = l_110 / 4u;
let l_112 = buffer_0_global[l_111];
let l_113 = l_94 / 4u;
let l_114 = l_112;
shared_memory_24[l_113] = l_114;
}
let l_115 = local_invocation_id.y * 32u;
let l_116 = l_115 + local_invocation_id.x;
let l_117 = l_116 * 4u;

for (var l_mut_118: u32 = 0u; l_mut_118 < 2u; l_mut_118++) {
l_mut_91 = l_117;
l_mut_90 = l_mut_50;
l_mut_89 = l_mut_51;
l_mut_88 = l_mut_52;
l_mut_87 = l_mut_53;
l_mut_86 = l_mut_54;
l_mut_85 = l_mut_55;
l_mut_84 = l_mut_11;
}

for (var l_mut_119: u32 = 0u; l_mut_119 < 1u; l_mut_119++) {
let l_120 = 0u * 128u;
let l_121 = l_mut_91 + l_120;
let l_122 = l_121 / 256u;
let l_123 = l_121 % 256u;
let l_124 = l_122 / 1u;
let l_125 = l_122 % 1u;
let l_126 = l_124 * 16u;
let l_127 = l_125 * 16u;
let l_128 = l_123 % 16u;
let l_129 = l_123 / 16u;
let l_130 = l_128 + l_126;
let l_131 = l_129 + l_127;
let l_132 = l_130 + l_mut_90;
let l_133 = l_131 + l_mut_89;
let l_134 = l_132 * l_mut_88;
let l_135 = l_133 * l_mut_87;
let l_136 = l_134 + l_135;
let l_137 = l_136 + l_mut_84;
let l_138 = l_137 / 4u;
let l_139 = buffer_1_global[l_138];
let l_140 = l_121 / 4u;
let l_141 = l_139;
shared_memory_40[l_140] = l_141;
}
workgroupBarrier();

for (var l_mut_142: u32 = 0u; l_mut_142 < 1u; l_mut_142++) {
l_mut_91 = 4u;
l_mut_90 = 16u;
l_mut_89 = 64u;
let l_143 = l_mut_91 * l_mut_90;
let l_144 = l_mut_142 * 1u;
let l_145 = l_144 + local_invocation_id.y;
let l_146 = l_143 * l_145;
let l_147 = l_146 + l_mut_89;
let slice_148_offset = l_146;
let slice_148_length = l_147 - l_146;
let slice_148_ptr = &shared_memory_24;
let l_149 = local_invocation_id.x * 16u;
let l_150 = l_149 / 32u;
let l_151 = l_150 / 4u;
let l_152 = l_150 % 4u;
let l_153 = 0u * 4u;
let l_154 = l_151 + l_153;
let l_155 = (*slice_148_ptr)[l_154+slice_148_offset];
let l_156 = l_155[l_152];
a_76[0u] = l_156;
let l_157 = 1u * 4u;
let l_158 = l_151 + l_157;
let l_159 = (*slice_148_ptr)[l_158+slice_148_offset];
let l_160 = l_159[l_152];
a_76[1u] = l_160;
let l_161 = 2u * 4u;
let l_162 = l_151 + l_161;
let l_163 = (*slice_148_ptr)[l_162+slice_148_offset];
let l_164 = l_163[l_152];
a_76[2u] = l_164;
let l_165 = 3u * 4u;
let l_166 = l_151 + l_165;
let l_167 = (*slice_148_ptr)[l_166+slice_148_offset];
let l_168 = l_167[l_152];
a_76[3u] = l_168;
let l_169 = 4u * 4u;
let l_170 = l_151 + l_169;
let l_171 = (*slice_148_ptr)[l_170+slice_148_offset];
let l_172 = l_171[l_152];
a_76[4u] = l_172;
let l_173 = 5u * 4u;
let l_174 = l_151 + l_173;
let l_175 = (*slice_148_ptr)[l_174+slice_148_offset];
let l_176 = l_175[l_152];
a_76[5u] = l_176;
let l_177 = 6u * 4u;
let l_178 = l_151 + l_177;
let l_179 = (*slice_148_ptr)[l_178+slice_148_offset];
let l_180 = l_179[l_152];
a_76[6u] = l_180;
let l_181 = 7u * 4u;
let l_182 = l_151 + l_181;
let l_183 = (*slice_148_ptr)[l_182+slice_148_offset];
let l_184 = l_183[l_152];
a_76[7u] = l_184;
let l_185 = 8u * 4u;
let l_186 = l_151 + l_185;
let l_187 = (*slice_148_ptr)[l_186+slice_148_offset];
let l_188 = l_187[l_152];
a_76[8u] = l_188;
let l_189 = 9u * 4u;
let l_190 = l_151 + l_189;
let l_191 = (*slice_148_ptr)[l_190+slice_148_offset];
let l_192 = l_191[l_152];
a_76[9u] = l_192;
let l_193 = 10u * 4u;
let l_194 = l_151 + l_193;
let l_195 = (*slice_148_ptr)[l_194+slice_148_offset];
let l_196 = l_195[l_152];
a_76[10u] = l_196;
let l_197 = 11u * 4u;
let l_198 = l_151 + l_197;
let l_199 = (*slice_148_ptr)[l_198+slice_148_offset];
let l_200 = l_199[l_152];
a_76[11u] = l_200;
let l_201 = 12u * 4u;
let l_202 = l_151 + l_201;
let l_203 = (*slice_148_ptr)[l_202+slice_148_offset];
let l_204 = l_203[l_152];
a_76[12u] = l_204;
let l_205 = 13u * 4u;
let l_206 = l_151 + l_205;
let l_207 = (*slice_148_ptr)[l_206+slice_148_offset];
let l_208 = l_207[l_152];
a_76[13u] = l_208;
let l_209 = 14u * 4u;
let l_210 = l_151 + l_209;
let l_211 = (*slice_148_ptr)[l_210+slice_148_offset];
let l_212 = l_211[l_152];
a_76[14u] = l_212;
let l_213 = 15u * 4u;
let l_214 = l_151 + l_213;
let l_215 = (*slice_148_ptr)[l_214+slice_148_offset];
let l_216 = l_215[l_152];
a_76[15u] = l_216;
l_mut_91 = 4u;
l_mut_90 = 16u;
l_mut_89 = 64u;
let l_217 = l_mut_91 * l_mut_90;
let l_218 = l_mut_142 * 1u;
let l_219 = l_218 + 0u;
let l_220 = l_217 * l_219;
let l_221 = l_220 + l_mut_89;
let slice_222_offset = l_220;
let slice_222_length = l_221 - l_220;
let slice_222_ptr = &shared_memory_40;
let l_223 = local_invocation_id.x / 16u;
let l_224 = local_invocation_id.x % 16u;
let l_225 = l_224 * 4u;
let l_226 = 2u * 0u;
let l_227 = l_226 + l_223;
let l_228 = l_227 / 4u;
let l_229 = l_228 + l_225;
let l_230 = (*slice_222_ptr)[l_229+slice_222_offset];
let l_231 = l_227 % 4u;
let l_232 = l_230[l_231];
a_77[0u] = l_232;
let l_233 = 2u * 1u;
let l_234 = l_233 + l_223;
let l_235 = l_234 / 4u;
let l_236 = l_235 + l_225;
let l_237 = (*slice_222_ptr)[l_236+slice_222_offset];
let l_238 = l_234 % 4u;
let l_239 = l_237[l_238];
a_77[1u] = l_239;
let l_240 = 2u * 2u;
let l_241 = l_240 + l_223;
let l_242 = l_241 / 4u;
let l_243 = l_242 + l_225;
let l_244 = (*slice_222_ptr)[l_243+slice_222_offset];
let l_245 = l_241 % 4u;
let l_246 = l_244[l_245];
a_77[2u] = l_246;
let l_247 = 2u * 3u;
let l_248 = l_247 + l_223;
let l_249 = l_248 / 4u;
let l_250 = l_249 + l_225;
let l_251 = (*slice_222_ptr)[l_250+slice_222_offset];
let l_252 = l_248 % 4u;
let l_253 = l_251[l_252];
a_77[3u] = l_253;
let l_254 = 2u * 4u;
let l_255 = l_254 + l_223;
let l_256 = l_255 / 4u;
let l_257 = l_256 + l_225;
let l_258 = (*slice_222_ptr)[l_257+slice_222_offset];
let l_259 = l_255 % 4u;
let l_260 = l_258[l_259];
a_77[4u] = l_260;
let l_261 = 2u * 5u;
let l_262 = l_261 + l_223;
let l_263 = l_262 / 4u;
let l_264 = l_263 + l_225;
let l_265 = (*slice_222_ptr)[l_264+slice_222_offset];
let l_266 = l_262 % 4u;
let l_267 = l_265[l_266];
a_77[5u] = l_267;
let l_268 = 2u * 6u;
let l_269 = l_268 + l_223;
let l_270 = l_269 / 4u;
let l_271 = l_270 + l_225;
let l_272 = (*slice_222_ptr)[l_271+slice_222_offset];
let l_273 = l_269 % 4u;
let l_274 = l_272[l_273];
a_77[6u] = l_274;
let l_275 = 2u * 7u;
let l_276 = l_275 + l_223;
let l_277 = l_276 / 4u;
let l_278 = l_277 + l_225;
let l_279 = (*slice_222_ptr)[l_278+slice_222_offset];
let l_280 = l_276 % 4u;
let l_281 = l_279[l_280];
a_77[7u] = l_281;
let l_282 = local_invocation_id.x % 2u;
let l_283 = l_282 * 8u;
let l_284 = a_77[0u];
let l_285 = 0u * 2u;
let l_286 = l_285 + 0u;
let l_287 = a_76[l_286];
let l_288 = 0u * 16u;
let l_289 = l_288 + 0u;
let l_290 = l_289 + l_283;
let l_291 = subgroupBroadcast(l_284, l_290);
let l_292 = l_287 * l_291;
let l_293 = l_292;
let l_294 = a_2[0u];
let l_295 = l_294 + l_293;
a_2[0u] = l_295;
let l_296 = 0u * 16u;
let l_297 = l_296 + 1u;
let l_298 = l_297 + l_283;
let l_299 = subgroupBroadcast(l_284, l_298);
let l_300 = l_287 * l_299;
let l_301 = l_300;
let l_302 = a_2[1u];
let l_303 = l_302 + l_301;
a_2[1u] = l_303;
let l_304 = 0u * 16u;
let l_305 = l_304 + 2u;
let l_306 = l_305 + l_283;
let l_307 = subgroupBroadcast(l_284, l_306);
let l_308 = l_287 * l_307;
let l_309 = l_308;
let l_310 = a_2[2u];
let l_311 = l_310 + l_309;
a_2[2u] = l_311;
let l_312 = 0u * 16u;
let l_313 = l_312 + 3u;
let l_314 = l_313 + l_283;
let l_315 = subgroupBroadcast(l_284, l_314);
let l_316 = l_287 * l_315;
let l_317 = l_316;
let l_318 = a_2[3u];
let l_319 = l_318 + l_317;
a_2[3u] = l_319;
let l_320 = 0u * 16u;
let l_321 = l_320 + 4u;
let l_322 = l_321 + l_283;
let l_323 = subgroupBroadcast(l_284, l_322);
let l_324 = l_287 * l_323;
let l_325 = l_324;
let l_326 = a_2[4u];
let l_327 = l_326 + l_325;
a_2[4u] = l_327;
let l_328 = 0u * 16u;
let l_329 = l_328 + 5u;
let l_330 = l_329 + l_283;
let l_331 = subgroupBroadcast(l_284, l_330);
let l_332 = l_287 * l_331;
let l_333 = l_332;
let l_334 = a_2[5u];
let l_335 = l_334 + l_333;
a_2[5u] = l_335;
let l_336 = 0u * 16u;
let l_337 = l_336 + 6u;
let l_338 = l_337 + l_283;
let l_339 = subgroupBroadcast(l_284, l_338);
let l_340 = l_287 * l_339;
let l_341 = l_340;
let l_342 = a_2[6u];
let l_343 = l_342 + l_341;
a_2[6u] = l_343;
let l_344 = 0u * 16u;
let l_345 = l_344 + 7u;
let l_346 = l_345 + l_283;
let l_347 = subgroupBroadcast(l_284, l_346);
let l_348 = l_287 * l_347;
let l_349 = l_348;
let l_350 = a_2[7u];
let l_351 = l_350 + l_349;
a_2[7u] = l_351;
let l_352 = 0u * 2u;
let l_353 = l_352 + 1u;
let l_354 = a_76[l_353];
let l_355 = 1u * 16u;
let l_356 = l_355 + 0u;
let l_357 = l_356 + l_283;
let l_358 = subgroupBroadcast(l_284, l_357);
let l_359 = l_354 * l_358;
let l_360 = l_359;
let l_361 = a_2[0u];
let l_362 = l_361 + l_360;
a_2[0u] = l_362;
let l_363 = 1u * 16u;
let l_364 = l_363 + 1u;
let l_365 = l_364 + l_283;
let l_366 = subgroupBroadcast(l_284, l_365);
let l_367 = l_354 * l_366;
let l_368 = l_367;
let l_369 = a_2[1u];
let l_370 = l_369 + l_368;
a_2[1u] = l_370;
let l_371 = 1u * 16u;
let l_372 = l_371 + 2u;
let l_373 = l_372 + l_283;
let l_374 = subgroupBroadcast(l_284, l_373);
let l_375 = l_354 * l_374;
let l_376 = l_375;
let l_377 = a_2[2u];
let l_378 = l_377 + l_376;
a_2[2u] = l_378;
let l_379 = 1u * 16u;
let l_380 = l_379 + 3u;
let l_381 = l_380 + l_283;
let l_382 = subgroupBroadcast(l_284, l_381);
let l_383 = l_354 * l_382;
let l_384 = l_383;
let l_385 = a_2[3u];
let l_386 = l_385 + l_384;
a_2[3u] = l_386;
let l_387 = 1u * 16u;
let l_388 = l_387 + 4u;
let l_389 = l_388 + l_283;
let l_390 = subgroupBroadcast(l_284, l_389);
let l_391 = l_354 * l_390;
let l_392 = l_391;
let l_393 = a_2[4u];
let l_394 = l_393 + l_392;
a_2[4u] = l_394;
let l_395 = 1u * 16u;
let l_396 = l_395 + 5u;
let l_397 = l_396 + l_283;
let l_398 = subgroupBroadcast(l_284, l_397);
let l_399 = l_354 * l_398;
let l_400 = l_399;
let l_401 = a_2[5u];
let l_402 = l_401 + l_400;
a_2[5u] = l_402;
let l_403 = 1u * 16u;
let l_404 = l_403 + 6u;
let l_405 = l_404 + l_283;
let l_406 = subgroupBroadcast(l_284, l_405);
let l_407 = l_354 * l_406;
let l_408 = l_407;
let l_409 = a_2[6u];
let l_410 = l_409 + l_408;
a_2[6u] = l_410;
let l_411 = 1u * 16u;
let l_412 = l_411 + 7u;
let l_413 = l_412 + l_283;
let l_414 = subgroupBroadcast(l_284, l_413);
let l_415 = l_354 * l_414;
let l_416 = l_415;
let l_417 = a_2[7u];
let l_418 = l_417 + l_416;
a_2[7u] = l_418;
let l_419 = a_77[1u];
let l_420 = 1u * 2u;
let l_421 = l_420 + 0u;
let l_422 = a_76[l_421];
let l_423 = 0u * 16u;
let l_424 = l_423 + 0u;
let l_425 = l_424 + l_283;
let l_426 = subgroupBroadcast(l_419, l_425);
let l_427 = l_422 * l_426;
let l_428 = l_427;
let l_429 = a_2[0u];
let l_430 = l_429 + l_428;
a_2[0u] = l_430;
let l_431 = 0u * 16u;
let l_432 = l_431 + 1u;
let l_433 = l_432 + l_283;
let l_434 = subgroupBroadcast(l_419, l_433);
let l_435 = l_422 * l_434;
let l_436 = l_435;
let l_437 = a_2[1u];
let l_438 = l_437 + l_436;
a_2[1u] = l_438;
let l_439 = 0u * 16u;
let l_440 = l_439 + 2u;
let l_441 = l_440 + l_283;
let l_442 = subgroupBroadcast(l_419, l_441);
let l_443 = l_422 * l_442;
let l_444 = l_443;
let l_445 = a_2[2u];
let l_446 = l_445 + l_444;
a_2[2u] = l_446;
let l_447 = 0u * 16u;
let l_448 = l_447 + 3u;
let l_449 = l_448 + l_283;
let l_450 = subgroupBroadcast(l_419, l_449);
let l_451 = l_422 * l_450;
let l_452 = l_451;
let l_453 = a_2[3u];
let l_454 = l_453 + l_452;
a_2[3u] = l_454;
let l_455 = 0u * 16u;
let l_456 = l_455 + 4u;
let l_457 = l_456 + l_283;
let l_458 = subgroupBroadcast(l_419, l_457);
let l_459 = l_422 * l_458;
let l_460 = l_459;
let l_461 = a_2[4u];
let l_462 = l_461 + l_460;
a_2[4u] = l_462;
let l_463 = 0u * 16u;
let l_464 = l_463 + 5u;
let l_465 = l_464 + l_283;
let l_466 = subgroupBroadcast(l_419, l_465);
let l_467 = l_422 * l_466;
let l_468 = l_467;
let l_469 = a_2[5u];
let l_470 = l_469 + l_468;
a_2[5u] = l_470;
let l_471 = 0u * 16u;
let l_472 = l_471 + 6u;
let l_473 = l_472 + l_283;
let l_474 = subgroupBroadcast(l_419, l_473);
let l_475 = l_422 * l_474;
let l_476 = l_475;
let l_477 = a_2[6u];
let l_478 = l_477 + l_476;
a_2[6u] = l_478;
let l_479 = 0u * 16u;
let l_480 = l_479 + 7u;
let l_481 = l_480 + l_283;
let l_482 = subgroupBroadcast(l_419, l_481);
let l_483 = l_422 * l_482;
let l_484 = l_483;
let l_485 = a_2[7u];
let l_486 = l_485 + l_484;
a_2[7u] = l_486;
let l_487 = 1u * 2u;
let l_488 = l_487 + 1u;
let l_489 = a_76[l_488];
let l_490 = 1u * 16u;
let l_491 = l_490 + 0u;
let l_492 = l_491 + l_283;
let l_493 = subgroupBroadcast(l_419, l_492);
let l_494 = l_489 * l_493;
let l_495 = l_494;
let l_496 = a_2[0u];
let l_497 = l_496 + l_495;
a_2[0u] = l_497;
let l_498 = 1u * 16u;
let l_499 = l_498 + 1u;
let l_500 = l_499 + l_283;
let l_501 = subgroupBroadcast(l_419, l_500);
let l_502 = l_489 * l_501;
let l_503 = l_502;
let l_504 = a_2[1u];
let l_505 = l_504 + l_503;
a_2[1u] = l_505;
let l_506 = 1u * 16u;
let l_507 = l_506 + 2u;
let l_508 = l_507 + l_283;
let l_509 = subgroupBroadcast(l_419, l_508);
let l_510 = l_489 * l_509;
let l_511 = l_510;
let l_512 = a_2[2u];
let l_513 = l_512 + l_511;
a_2[2u] = l_513;
let l_514 = 1u * 16u;
let l_515 = l_514 + 3u;
let l_516 = l_515 + l_283;
let l_517 = subgroupBroadcast(l_419, l_516);
let l_518 = l_489 * l_517;
let l_519 = l_518;
let l_520 = a_2[3u];
let l_521 = l_520 + l_519;
a_2[3u] = l_521;
let l_522 = 1u * 16u;
let l_523 = l_522 + 4u;
let l_524 = l_523 + l_283;
let l_525 = subgroupBroadcast(l_419, l_524);
let l_526 = l_489 * l_525;
let l_527 = l_526;
let l_528 = a_2[4u];
let l_529 = l_528 + l_527;
a_2[4u] = l_529;
let l_530 = 1u * 16u;
let l_531 = l_530 + 5u;
let l_532 = l_531 + l_283;
let l_533 = subgroupBroadcast(l_419, l_532);
let l_534 = l_489 * l_533;
let l_535 = l_534;
let l_536 = a_2[5u];
let l_537 = l_536 + l_535;
a_2[5u] = l_537;
let l_538 = 1u * 16u;
let l_539 = l_538 + 6u;
let l_540 = l_539 + l_283;
let l_541 = subgroupBroadcast(l_419, l_540);
let l_542 = l_489 * l_541;
let l_543 = l_542;
let l_544 = a_2[6u];
let l_545 = l_544 + l_543;
a_2[6u] = l_545;
let l_546 = 1u * 16u;
let l_547 = l_546 + 7u;
let l_548 = l_547 + l_283;
let l_549 = subgroupBroadcast(l_419, l_548);
let l_550 = l_489 * l_549;
let l_551 = l_550;
let l_552 = a_2[7u];
let l_553 = l_552 + l_551;
a_2[7u] = l_553;
let l_554 = a_77[2u];
let l_555 = 2u * 2u;
let l_556 = l_555 + 0u;
let l_557 = a_76[l_556];
let l_558 = 0u * 16u;
let l_559 = l_558 + 0u;
let l_560 = l_559 + l_283;
let l_561 = subgroupBroadcast(l_554, l_560);
let l_562 = l_557 * l_561;
let l_563 = l_562;
let l_564 = a_2[0u];
let l_565 = l_564 + l_563;
a_2[0u] = l_565;
let l_566 = 0u * 16u;
let l_567 = l_566 + 1u;
let l_568 = l_567 + l_283;
let l_569 = subgroupBroadcast(l_554, l_568);
let l_570 = l_557 * l_569;
let l_571 = l_570;
let l_572 = a_2[1u];
let l_573 = l_572 + l_571;
a_2[1u] = l_573;
let l_574 = 0u * 16u;
let l_575 = l_574 + 2u;
let l_576 = l_575 + l_283;
let l_577 = subgroupBroadcast(l_554, l_576);
let l_578 = l_557 * l_577;
let l_579 = l_578;
let l_580 = a_2[2u];
let l_581 = l_580 + l_579;
a_2[2u] = l_581;
let l_582 = 0u * 16u;
let l_583 = l_582 + 3u;
let l_584 = l_583 + l_283;
let l_585 = subgroupBroadcast(l_554, l_584);
let l_586 = l_557 * l_585;
let l_587 = l_586;
let l_588 = a_2[3u];
let l_589 = l_588 + l_587;
a_2[3u] = l_589;
let l_590 = 0u * 16u;
let l_591 = l_590 + 4u;
let l_592 = l_591 + l_283;
let l_593 = subgroupBroadcast(l_554, l_592);
let l_594 = l_557 * l_593;
let l_595 = l_594;
let l_596 = a_2[4u];
let l_597 = l_596 + l_595;
a_2[4u] = l_597;
let l_598 = 0u * 16u;
let l_599 = l_598 + 5u;
let l_600 = l_599 + l_283;
let l_601 = subgroupBroadcast(l_554, l_600);
let l_602 = l_557 * l_601;
let l_603 = l_602;
let l_604 = a_2[5u];
let l_605 = l_604 + l_603;
a_2[5u] = l_605;
let l_606 = 0u * 16u;
let l_607 = l_606 + 6u;
let l_608 = l_607 + l_283;
let l_609 = subgroupBroadcast(l_554, l_608);
let l_610 = l_557 * l_609;
let l_611 = l_610;
let l_612 = a_2[6u];
let l_613 = l_612 + l_611;
a_2[6u] = l_613;
let l_614 = 0u * 16u;
let l_615 = l_614 + 7u;
let l_616 = l_615 + l_283;
let l_617 = subgroupBroadcast(l_554, l_616);
let l_618 = l_557 * l_617;
let l_619 = l_618;
let l_620 = a_2[7u];
let l_621 = l_620 + l_619;
a_2[7u] = l_621;
let l_622 = 2u * 2u;
let l_623 = l_622 + 1u;
let l_624 = a_76[l_623];
let l_625 = 1u * 16u;
let l_626 = l_625 + 0u;
let l_627 = l_626 + l_283;
let l_628 = subgroupBroadcast(l_554, l_627);
let l_629 = l_624 * l_628;
let l_630 = l_629;
let l_631 = a_2[0u];
let l_632 = l_631 + l_630;
a_2[0u] = l_632;
let l_633 = 1u * 16u;
let l_634 = l_633 + 1u;
let l_635 = l_634 + l_283;
let l_636 = subgroupBroadcast(l_554, l_635);
let l_637 = l_624 * l_636;
let l_638 = l_637;
let l_639 = a_2[1u];
let l_640 = l_639 + l_638;
a_2[1u] = l_640;
let l_641 = 1u * 16u;
let l_642 = l_641 + 2u;
let l_643 = l_642 + l_283;
let l_644 = subgroupBroadcast(l_554, l_643);
let l_645 = l_624 * l_644;
let l_646 = l_645;
let l_647 = a_2[2u];
let l_648 = l_647 + l_646;
a_2[2u] = l_648;
let l_649 = 1u * 16u;
let l_650 = l_649 + 3u;
let l_651 = l_650 + l_283;
let l_652 = subgroupBroadcast(l_554, l_651);
let l_653 = l_624 * l_652;
let l_654 = l_653;
let l_655 = a_2[3u];
let l_656 = l_655 + l_654;
a_2[3u] = l_656;
let l_657 = 1u * 16u;
let l_658 = l_657 + 4u;
let l_659 = l_658 + l_283;
let l_660 = subgroupBroadcast(l_554, l_659);
let l_661 = l_624 * l_660;
let l_662 = l_661;
let l_663 = a_2[4u];
let l_664 = l_663 + l_662;
a_2[4u] = l_664;
let l_665 = 1u * 16u;
let l_666 = l_665 + 5u;
let l_667 = l_666 + l_283;
let l_668 = subgroupBroadcast(l_554, l_667);
let l_669 = l_624 * l_668;
let l_670 = l_669;
let l_671 = a_2[5u];
let l_672 = l_671 + l_670;
a_2[5u] = l_672;
let l_673 = 1u * 16u;
let l_674 = l_673 + 6u;
let l_675 = l_674 + l_283;
let l_676 = subgroupBroadcast(l_554, l_675);
let l_677 = l_624 * l_676;
let l_678 = l_677;
let l_679 = a_2[6u];
let l_680 = l_679 + l_678;
a_2[6u] = l_680;
let l_681 = 1u * 16u;
let l_682 = l_681 + 7u;
let l_683 = l_682 + l_283;
let l_684 = subgroupBroadcast(l_554, l_683);
let l_685 = l_624 * l_684;
let l_686 = l_685;
let l_687 = a_2[7u];
let l_688 = l_687 + l_686;
a_2[7u] = l_688;
let l_689 = a_77[3u];
let l_690 = 3u * 2u;
let l_691 = l_690 + 0u;
let l_692 = a_76[l_691];
let l_693 = 0u * 16u;
let l_694 = l_693 + 0u;
let l_695 = l_694 + l_283;
let l_696 = subgroupBroadcast(l_689, l_695);
let l_697 = l_692 * l_696;
let l_698 = l_697;
let l_699 = a_2[0u];
let l_700 = l_699 + l_698;
a_2[0u] = l_700;
let l_701 = 0u * 16u;
let l_702 = l_701 + 1u;
let l_703 = l_702 + l_283;
let l_704 = subgroupBroadcast(l_689, l_703);
let l_705 = l_692 * l_704;
let l_706 = l_705;
let l_707 = a_2[1u];
let l_708 = l_707 + l_706;
a_2[1u] = l_708;
let l_709 = 0u * 16u;
let l_710 = l_709 + 2u;
let l_711 = l_710 + l_283;
let l_712 = subgroupBroadcast(l_689, l_711);
let l_713 = l_692 * l_712;
let l_714 = l_713;
let l_715 = a_2[2u];
let l_716 = l_715 + l_714;
a_2[2u] = l_716;
let l_717 = 0u * 16u;
let l_718 = l_717 + 3u;
let l_719 = l_718 + l_283;
let l_720 = subgroupBroadcast(l_689, l_719);
let l_721 = l_692 * l_720;
let l_722 = l_721;
let l_723 = a_2[3u];
let l_724 = l_723 + l_722;
a_2[3u] = l_724;
let l_725 = 0u * 16u;
let l_726 = l_725 + 4u;
let l_727 = l_726 + l_283;
let l_728 = subgroupBroadcast(l_689, l_727);
let l_729 = l_692 * l_728;
let l_730 = l_729;
let l_731 = a_2[4u];
let l_732 = l_731 + l_730;
a_2[4u] = l_732;
let l_733 = 0u * 16u;
let l_734 = l_733 + 5u;
let l_735 = l_734 + l_283;
let l_736 = subgroupBroadcast(l_689, l_735);
let l_737 = l_692 * l_736;
let l_738 = l_737;
let l_739 = a_2[5u];
let l_740 = l_739 + l_738;
a_2[5u] = l_740;
let l_741 = 0u * 16u;
let l_742 = l_741 + 6u;
let l_743 = l_742 + l_283;
let l_744 = subgroupBroadcast(l_689, l_743);
let l_745 = l_692 * l_744;
let l_746 = l_745;
let l_747 = a_2[6u];
let l_748 = l_747 + l_746;
a_2[6u] = l_748;
let l_749 = 0u * 16u;
let l_750 = l_749 + 7u;
let l_751 = l_750 + l_283;
let l_752 = subgroupBroadcast(l_689, l_751);
let l_753 = l_692 * l_752;
let l_754 = l_753;
let l_755 = a_2[7u];
let l_756 = l_755 + l_754;
a_2[7u] = l_756;
let l_757 = 3u * 2u;
let l_758 = l_757 + 1u;
let l_759 = a_76[l_758];
let l_760 = 1u * 16u;
let l_761 = l_760 + 0u;
let l_762 = l_761 + l_283;
let l_763 = subgroupBroadcast(l_689, l_762);
let l_764 = l_759 * l_763;
let l_765 = l_764;
let l_766 = a_2[0u];
let l_767 = l_766 + l_765;
a_2[0u] = l_767;
let l_768 = 1u * 16u;
let l_769 = l_768 + 1u;
let l_770 = l_769 + l_283;
let l_771 = subgroupBroadcast(l_689, l_770);
let l_772 = l_759 * l_771;
let l_773 = l_772;
let l_774 = a_2[1u];
let l_775 = l_774 + l_773;
a_2[1u] = l_775;
let l_776 = 1u * 16u;
let l_777 = l_776 + 2u;
let l_778 = l_777 + l_283;
let l_779 = subgroupBroadcast(l_689, l_778);
let l_780 = l_759 * l_779;
let l_781 = l_780;
let l_782 = a_2[2u];
let l_783 = l_782 + l_781;
a_2[2u] = l_783;
let l_784 = 1u * 16u;
let l_785 = l_784 + 3u;
let l_786 = l_785 + l_283;
let l_787 = subgroupBroadcast(l_689, l_786);
let l_788 = l_759 * l_787;
let l_789 = l_788;
let l_790 = a_2[3u];
let l_791 = l_790 + l_789;
a_2[3u] = l_791;
let l_792 = 1u * 16u;
let l_793 = l_792 + 4u;
let l_794 = l_793 + l_283;
let l_795 = subgroupBroadcast(l_689, l_794);
let l_796 = l_759 * l_795;
let l_797 = l_796;
let l_798 = a_2[4u];
let l_799 = l_798 + l_797;
a_2[4u] = l_799;
let l_800 = 1u * 16u;
let l_801 = l_800 + 5u;
let l_802 = l_801 + l_283;
let l_803 = subgroupBroadcast(l_689, l_802);
let l_804 = l_759 * l_803;
let l_805 = l_804;
let l_806 = a_2[5u];
let l_807 = l_806 + l_805;
a_2[5u] = l_807;
let l_808 = 1u * 16u;
let l_809 = l_808 + 6u;
let l_810 = l_809 + l_283;
let l_811 = subgroupBroadcast(l_689, l_810);
let l_812 = l_759 * l_811;
let l_813 = l_812;
let l_814 = a_2[6u];
let l_815 = l_814 + l_813;
a_2[6u] = l_815;
let l_816 = 1u * 16u;
let l_817 = l_816 + 7u;
let l_818 = l_817 + l_283;
let l_819 = subgroupBroadcast(l_689, l_818);
let l_820 = l_759 * l_819;
let l_821 = l_820;
let l_822 = a_2[7u];
let l_823 = l_822 + l_821;
a_2[7u] = l_823;
let l_824 = a_77[4u];
let l_825 = 4u * 2u;
let l_826 = l_825 + 0u;
let l_827 = a_76[l_826];
let l_828 = 0u * 16u;
let l_829 = l_828 + 0u;
let l_830 = l_829 + l_283;
let l_831 = subgroupBroadcast(l_824, l_830);
let l_832 = l_827 * l_831;
let l_833 = l_832;
let l_834 = a_2[0u];
let l_835 = l_834 + l_833;
a_2[0u] = l_835;
let l_836 = 0u * 16u;
let l_837 = l_836 + 1u;
let l_838 = l_837 + l_283;
let l_839 = subgroupBroadcast(l_824, l_838);
let l_840 = l_827 * l_839;
let l_841 = l_840;
let l_842 = a_2[1u];
let l_843 = l_842 + l_841;
a_2[1u] = l_843;
let l_844 = 0u * 16u;
let l_845 = l_844 + 2u;
let l_846 = l_845 + l_283;
let l_847 = subgroupBroadcast(l_824, l_846);
let l_848 = l_827 * l_847;
let l_849 = l_848;
let l_850 = a_2[2u];
let l_851 = l_850 + l_849;
a_2[2u] = l_851;
let l_852 = 0u * 16u;
let l_853 = l_852 + 3u;
let l_854 = l_853 + l_283;
let l_855 = subgroupBroadcast(l_824, l_854);
let l_856 = l_827 * l_855;
let l_857 = l_856;
let l_858 = a_2[3u];
let l_859 = l_858 + l_857;
a_2[3u] = l_859;
let l_860 = 0u * 16u;
let l_861 = l_860 + 4u;
let l_862 = l_861 + l_283;
let l_863 = subgroupBroadcast(l_824, l_862);
let l_864 = l_827 * l_863;
let l_865 = l_864;
let l_866 = a_2[4u];
let l_867 = l_866 + l_865;
a_2[4u] = l_867;
let l_868 = 0u * 16u;
let l_869 = l_868 + 5u;
let l_870 = l_869 + l_283;
let l_871 = subgroupBroadcast(l_824, l_870);
let l_872 = l_827 * l_871;
let l_873 = l_872;
let l_874 = a_2[5u];
let l_875 = l_874 + l_873;
a_2[5u] = l_875;
let l_876 = 0u * 16u;
let l_877 = l_876 + 6u;
let l_878 = l_877 + l_283;
let l_879 = subgroupBroadcast(l_824, l_878);
let l_880 = l_827 * l_879;
let l_881 = l_880;
let l_882 = a_2[6u];
let l_883 = l_882 + l_881;
a_2[6u] = l_883;
let l_884 = 0u * 16u;
let l_885 = l_884 + 7u;
let l_886 = l_885 + l_283;
let l_887 = subgroupBroadcast(l_824, l_886);
let l_888 = l_827 * l_887;
let l_889 = l_888;
let l_890 = a_2[7u];
let l_891 = l_890 + l_889;
a_2[7u] = l_891;
let l_892 = 4u * 2u;
let l_893 = l_892 + 1u;
let l_894 = a_76[l_893];
let l_895 = 1u * 16u;
let l_896 = l_895 + 0u;
let l_897 = l_896 + l_283;
let l_898 = subgroupBroadcast(l_824, l_897);
let l_899 = l_894 * l_898;
let l_900 = l_899;
let l_901 = a_2[0u];
let l_902 = l_901 + l_900;
a_2[0u] = l_902;
let l_903 = 1u * 16u;
let l_904 = l_903 + 1u;
let l_905 = l_904 + l_283;
let l_906 = subgroupBroadcast(l_824, l_905);
let l_907 = l_894 * l_906;
let l_908 = l_907;
let l_909 = a_2[1u];
let l_910 = l_909 + l_908;
a_2[1u] = l_910;
let l_911 = 1u * 16u;
let l_912 = l_911 + 2u;
let l_913 = l_912 + l_283;
let l_914 = subgroupBroadcast(l_824, l_913);
let l_915 = l_894 * l_914;
let l_916 = l_915;
let l_917 = a_2[2u];
let l_918 = l_917 + l_916;
a_2[2u] = l_918;
let l_919 = 1u * 16u;
let l_920 = l_919 + 3u;
let l_921 = l_920 + l_283;
let l_922 = subgroupBroadcast(l_824, l_921);
let l_923 = l_894 * l_922;
let l_924 = l_923;
let l_925 = a_2[3u];
let l_926 = l_925 + l_924;
a_2[3u] = l_926;
let l_927 = 1u * 16u;
let l_928 = l_927 + 4u;
let l_929 = l_928 + l_283;
let l_930 = subgroupBroadcast(l_824, l_929);
let l_931 = l_894 * l_930;
let l_932 = l_931;
let l_933 = a_2[4u];
let l_934 = l_933 + l_932;
a_2[4u] = l_934;
let l_935 = 1u * 16u;
let l_936 = l_935 + 5u;
let l_937 = l_936 + l_283;
let l_938 = subgroupBroadcast(l_824, l_937);
let l_939 = l_894 * l_938;
let l_940 = l_939;
let l_941 = a_2[5u];
let l_942 = l_941 + l_940;
a_2[5u] = l_942;
let l_943 = 1u * 16u;
let l_944 = l_943 + 6u;
let l_945 = l_944 + l_283;
let l_946 = subgroupBroadcast(l_824, l_945);
let l_947 = l_894 * l_946;
let l_948 = l_947;
let l_949 = a_2[6u];
let l_950 = l_949 + l_948;
a_2[6u] = l_950;
let l_951 = 1u * 16u;
let l_952 = l_951 + 7u;
let l_953 = l_952 + l_283;
let l_954 = subgroupBroadcast(l_824, l_953);
let l_955 = l_894 * l_954;
let l_956 = l_955;
let l_957 = a_2[7u];
let l_958 = l_957 + l_956;
a_2[7u] = l_958;
let l_959 = a_77[5u];
let l_960 = 5u * 2u;
let l_961 = l_960 + 0u;
let l_962 = a_76[l_961];
let l_963 = 0u * 16u;
let l_964 = l_963 + 0u;
let l_965 = l_964 + l_283;
let l_966 = subgroupBroadcast(l_959, l_965);
let l_967 = l_962 * l_966;
let l_968 = l_967;
let l_969 = a_2[0u];
let l_970 = l_969 + l_968;
a_2[0u] = l_970;
let l_971 = 0u * 16u;
let l_972 = l_971 + 1u;
let l_973 = l_972 + l_283;
let l_974 = subgroupBroadcast(l_959, l_973);
let l_975 = l_962 * l_974;
let l_976 = l_975;
let l_977 = a_2[1u];
let l_978 = l_977 + l_976;
a_2[1u] = l_978;
let l_979 = 0u * 16u;
let l_980 = l_979 + 2u;
let l_981 = l_980 + l_283;
let l_982 = subgroupBroadcast(l_959, l_981);
let l_983 = l_962 * l_982;
let l_984 = l_983;
let l_985 = a_2[2u];
let l_986 = l_985 + l_984;
a_2[2u] = l_986;
let l_987 = 0u * 16u;
let l_988 = l_987 + 3u;
let l_989 = l_988 + l_283;
let l_990 = subgroupBroadcast(l_959, l_989);
let l_991 = l_962 * l_990;
let l_992 = l_991;
let l_993 = a_2[3u];
let l_994 = l_993 + l_992;
a_2[3u] = l_994;
let l_995 = 0u * 16u;
let l_996 = l_995 + 4u;
let l_997 = l_996 + l_283;
let l_998 = subgroupBroadcast(l_959, l_997);
let l_999 = l_962 * l_998;
let l_1000 = l_999;
let l_1001 = a_2[4u];
let l_1002 = l_1001 + l_1000;
a_2[4u] = l_1002;
let l_1003 = 0u * 16u;
let l_1004 = l_1003 + 5u;
let l_1005 = l_1004 + l_283;
let l_1006 = subgroupBroadcast(l_959, l_1005);
let l_1007 = l_962 * l_1006;
let l_1008 = l_1007;
let l_1009 = a_2[5u];
let l_1010 = l_1009 + l_1008;
a_2[5u] = l_1010;
let l_1011 = 0u * 16u;
let l_1012 = l_1011 + 6u;
let l_1013 = l_1012 + l_283;
let l_1014 = subgroupBroadcast(l_959, l_1013);
let l_1015 = l_962 * l_1014;
let l_1016 = l_1015;
let l_1017 = a_2[6u];
let l_1018 = l_1017 + l_1016;
a_2[6u] = l_1018;
let l_1019 = 0u * 16u;
let l_1020 = l_1019 + 7u;
let l_1021 = l_1020 + l_283;
let l_1022 = subgroupBroadcast(l_959, l_1021);
let l_1023 = l_962 * l_1022;
let l_1024 = l_1023;
let l_1025 = a_2[7u];
let l_1026 = l_1025 + l_1024;
a_2[7u] = l_1026;
let l_1027 = 5u * 2u;
let l_1028 = l_1027 + 1u;
let l_1029 = a_76[l_1028];
let l_1030 = 1u * 16u;
let l_1031 = l_1030 + 0u;
let l_1032 = l_1031 + l_283;
let l_1033 = subgroupBroadcast(l_959, l_1032);
let l_1034 = l_1029 * l_1033;
let l_1035 = l_1034;
let l_1036 = a_2[0u];
let l_1037 = l_1036 + l_1035;
a_2[0u] = l_1037;
let l_1038 = 1u * 16u;
let l_1039 = l_1038 + 1u;
let l_1040 = l_1039 + l_283;
let l_1041 = subgroupBroadcast(l_959, l_1040);
let l_1042 = l_1029 * l_1041;
let l_1043 = l_1042;
let l_1044 = a_2[1u];
let l_1045 = l_1044 + l_1043;
a_2[1u] = l_1045;
let l_1046 = 1u * 16u;
let l_1047 = l_1046 + 2u;
let l_1048 = l_1047 + l_283;
let l_1049 = subgroupBroadcast(l_959, l_1048);
let l_1050 = l_1029 * l_1049;
let l_1051 = l_1050;
let l_1052 = a_2[2u];
let l_1053 = l_1052 + l_1051;
a_2[2u] = l_1053;
let l_1054 = 1u * 16u;
let l_1055 = l_1054 + 3u;
let l_1056 = l_1055 + l_283;
let l_1057 = subgroupBroadcast(l_959, l_1056);
let l_1058 = l_1029 * l_1057;
let l_1059 = l_1058;
let l_1060 = a_2[3u];
let l_1061 = l_1060 + l_1059;
a_2[3u] = l_1061;
let l_1062 = 1u * 16u;
let l_1063 = l_1062 + 4u;
let l_1064 = l_1063 + l_283;
let l_1065 = subgroupBroadcast(l_959, l_1064);
let l_1066 = l_1029 * l_1065;
let l_1067 = l_1066;
let l_1068 = a_2[4u];
let l_1069 = l_1068 + l_1067;
a_2[4u] = l_1069;
let l_1070 = 1u * 16u;
let l_1071 = l_1070 + 5u;
let l_1072 = l_1071 + l_283;
let l_1073 = subgroupBroadcast(l_959, l_1072);
let l_1074 = l_1029 * l_1073;
let l_1075 = l_1074;
let l_1076 = a_2[5u];
let l_1077 = l_1076 + l_1075;
a_2[5u] = l_1077;
let l_1078 = 1u * 16u;
let l_1079 = l_1078 + 6u;
let l_1080 = l_1079 + l_283;
let l_1081 = subgroupBroadcast(l_959, l_1080);
let l_1082 = l_1029 * l_1081;
let l_1083 = l_1082;
let l_1084 = a_2[6u];
let l_1085 = l_1084 + l_1083;
a_2[6u] = l_1085;
let l_1086 = 1u * 16u;
let l_1087 = l_1086 + 7u;
let l_1088 = l_1087 + l_283;
let l_1089 = subgroupBroadcast(l_959, l_1088);
let l_1090 = l_1029 * l_1089;
let l_1091 = l_1090;
let l_1092 = a_2[7u];
let l_1093 = l_1092 + l_1091;
a_2[7u] = l_1093;
let l_1094 = a_77[6u];
let l_1095 = 6u * 2u;
let l_1096 = l_1095 + 0u;
let l_1097 = a_76[l_1096];
let l_1098 = 0u * 16u;
let l_1099 = l_1098 + 0u;
let l_1100 = l_1099 + l_283;
let l_1101 = subgroupBroadcast(l_1094, l_1100);
let l_1102 = l_1097 * l_1101;
let l_1103 = l_1102;
let l_1104 = a_2[0u];
let l_1105 = l_1104 + l_1103;
a_2[0u] = l_1105;
let l_1106 = 0u * 16u;
let l_1107 = l_1106 + 1u;
let l_1108 = l_1107 + l_283;
let l_1109 = subgroupBroadcast(l_1094, l_1108);
let l_1110 = l_1097 * l_1109;
let l_1111 = l_1110;
let l_1112 = a_2[1u];
let l_1113 = l_1112 + l_1111;
a_2[1u] = l_1113;
let l_1114 = 0u * 16u;
let l_1115 = l_1114 + 2u;
let l_1116 = l_1115 + l_283;
let l_1117 = subgroupBroadcast(l_1094, l_1116);
let l_1118 = l_1097 * l_1117;
let l_1119 = l_1118;
let l_1120 = a_2[2u];
let l_1121 = l_1120 + l_1119;
a_2[2u] = l_1121;
let l_1122 = 0u * 16u;
let l_1123 = l_1122 + 3u;
let l_1124 = l_1123 + l_283;
let l_1125 = subgroupBroadcast(l_1094, l_1124);
let l_1126 = l_1097 * l_1125;
let l_1127 = l_1126;
let l_1128 = a_2[3u];
let l_1129 = l_1128 + l_1127;
a_2[3u] = l_1129;
let l_1130 = 0u * 16u;
let l_1131 = l_1130 + 4u;
let l_1132 = l_1131 + l_283;
let l_1133 = subgroupBroadcast(l_1094, l_1132);
let l_1134 = l_1097 * l_1133;
let l_1135 = l_1134;
let l_1136 = a_2[4u];
let l_1137 = l_1136 + l_1135;
a_2[4u] = l_1137;
let l_1138 = 0u * 16u;
let l_1139 = l_1138 + 5u;
let l_1140 = l_1139 + l_283;
let l_1141 = subgroupBroadcast(l_1094, l_1140);
let l_1142 = l_1097 * l_1141;
let l_1143 = l_1142;
let l_1144 = a_2[5u];
let l_1145 = l_1144 + l_1143;
a_2[5u] = l_1145;
let l_1146 = 0u * 16u;
let l_1147 = l_1146 + 6u;
let l_1148 = l_1147 + l_283;
let l_1149 = subgroupBroadcast(l_1094, l_1148);
let l_1150 = l_1097 * l_1149;
let l_1151 = l_1150;
let l_1152 = a_2[6u];
let l_1153 = l_1152 + l_1151;
a_2[6u] = l_1153;
let l_1154 = 0u * 16u;
let l_1155 = l_1154 + 7u;
let l_1156 = l_1155 + l_283;
let l_1157 = subgroupBroadcast(l_1094, l_1156);
let l_1158 = l_1097 * l_1157;
let l_1159 = l_1158;
let l_1160 = a_2[7u];
let l_1161 = l_1160 + l_1159;
a_2[7u] = l_1161;
let l_1162 = 6u * 2u;
let l_1163 = l_1162 + 1u;
let l_1164 = a_76[l_1163];
let l_1165 = 1u * 16u;
let l_1166 = l_1165 + 0u;
let l_1167 = l_1166 + l_283;
let l_1168 = subgroupBroadcast(l_1094, l_1167);
let l_1169 = l_1164 * l_1168;
let l_1170 = l_1169;
let l_1171 = a_2[0u];
let l_1172 = l_1171 + l_1170;
a_2[0u] = l_1172;
let l_1173 = 1u * 16u;
let l_1174 = l_1173 + 1u;
let l_1175 = l_1174 + l_283;
let l_1176 = subgroupBroadcast(l_1094, l_1175);
let l_1177 = l_1164 * l_1176;
let l_1178 = l_1177;
let l_1179 = a_2[1u];
let l_1180 = l_1179 + l_1178;
a_2[1u] = l_1180;
let l_1181 = 1u * 16u;
let l_1182 = l_1181 + 2u;
let l_1183 = l_1182 + l_283;
let l_1184 = subgroupBroadcast(l_1094, l_1183);
let l_1185 = l_1164 * l_1184;
let l_1186 = l_1185;
let l_1187 = a_2[2u];
let l_1188 = l_1187 + l_1186;
a_2[2u] = l_1188;
let l_1189 = 1u * 16u;
let l_1190 = l_1189 + 3u;
let l_1191 = l_1190 + l_283;
let l_1192 = subgroupBroadcast(l_1094, l_1191);
let l_1193 = l_1164 * l_1192;
let l_1194 = l_1193;
let l_1195 = a_2[3u];
let l_1196 = l_1195 + l_1194;
a_2[3u] = l_1196;
let l_1197 = 1u * 16u;
let l_1198 = l_1197 + 4u;
let l_1199 = l_1198 + l_283;
let l_1200 = subgroupBroadcast(l_1094, l_1199);
let l_1201 = l_1164 * l_1200;
let l_1202 = l_1201;
let l_1203 = a_2[4u];
let l_1204 = l_1203 + l_1202;
a_2[4u] = l_1204;
let l_1205 = 1u * 16u;
let l_1206 = l_1205 + 5u;
let l_1207 = l_1206 + l_283;
let l_1208 = subgroupBroadcast(l_1094, l_1207);
let l_1209 = l_1164 * l_1208;
let l_1210 = l_1209;
let l_1211 = a_2[5u];
let l_1212 = l_1211 + l_1210;
a_2[5u] = l_1212;
let l_1213 = 1u * 16u;
let l_1214 = l_1213 + 6u;
let l_1215 = l_1214 + l_283;
let l_1216 = subgroupBroadcast(l_1094, l_1215);
let l_1217 = l_1164 * l_1216;
let l_1218 = l_1217;
let l_1219 = a_2[6u];
let l_1220 = l_1219 + l_1218;
a_2[6u] = l_1220;
let l_1221 = 1u * 16u;
let l_1222 = l_1221 + 7u;
let l_1223 = l_1222 + l_283;
let l_1224 = subgroupBroadcast(l_1094, l_1223);
let l_1225 = l_1164 * l_1224;
let l_1226 = l_1225;
let l_1227 = a_2[7u];
let l_1228 = l_1227 + l_1226;
a_2[7u] = l_1228;
let l_1229 = a_77[7u];
let l_1230 = 7u * 2u;
let l_1231 = l_1230 + 0u;
let l_1232 = a_76[l_1231];
let l_1233 = 0u * 16u;
let l_1234 = l_1233 + 0u;
let l_1235 = l_1234 + l_283;
let l_1236 = subgroupBroadcast(l_1229, l_1235);
let l_1237 = l_1232 * l_1236;
let l_1238 = l_1237;
let l_1239 = a_2[0u];
let l_1240 = l_1239 + l_1238;
a_2[0u] = l_1240;
let l_1241 = 0u * 16u;
let l_1242 = l_1241 + 1u;
let l_1243 = l_1242 + l_283;
let l_1244 = subgroupBroadcast(l_1229, l_1243);
let l_1245 = l_1232 * l_1244;
let l_1246 = l_1245;
let l_1247 = a_2[1u];
let l_1248 = l_1247 + l_1246;
a_2[1u] = l_1248;
let l_1249 = 0u * 16u;
let l_1250 = l_1249 + 2u;
let l_1251 = l_1250 + l_283;
let l_1252 = subgroupBroadcast(l_1229, l_1251);
let l_1253 = l_1232 * l_1252;
let l_1254 = l_1253;
let l_1255 = a_2[2u];
let l_1256 = l_1255 + l_1254;
a_2[2u] = l_1256;
let l_1257 = 0u * 16u;
let l_1258 = l_1257 + 3u;
let l_1259 = l_1258 + l_283;
let l_1260 = subgroupBroadcast(l_1229, l_1259);
let l_1261 = l_1232 * l_1260;
let l_1262 = l_1261;
let l_1263 = a_2[3u];
let l_1264 = l_1263 + l_1262;
a_2[3u] = l_1264;
let l_1265 = 0u * 16u;
let l_1266 = l_1265 + 4u;
let l_1267 = l_1266 + l_283;
let l_1268 = subgroupBroadcast(l_1229, l_1267);
let l_1269 = l_1232 * l_1268;
let l_1270 = l_1269;
let l_1271 = a_2[4u];
let l_1272 = l_1271 + l_1270;
a_2[4u] = l_1272;
let l_1273 = 0u * 16u;
let l_1274 = l_1273 + 5u;
let l_1275 = l_1274 + l_283;
let l_1276 = subgroupBroadcast(l_1229, l_1275);
let l_1277 = l_1232 * l_1276;
let l_1278 = l_1277;
let l_1279 = a_2[5u];
let l_1280 = l_1279 + l_1278;
a_2[5u] = l_1280;
let l_1281 = 0u * 16u;
let l_1282 = l_1281 + 6u;
let l_1283 = l_1282 + l_283;
let l_1284 = subgroupBroadcast(l_1229, l_1283);
let l_1285 = l_1232 * l_1284;
let l_1286 = l_1285;
let l_1287 = a_2[6u];
let l_1288 = l_1287 + l_1286;
a_2[6u] = l_1288;
let l_1289 = 0u * 16u;
let l_1290 = l_1289 + 7u;
let l_1291 = l_1290 + l_283;
let l_1292 = subgroupBroadcast(l_1229, l_1291);
let l_1293 = l_1232 * l_1292;
let l_1294 = l_1293;
let l_1295 = a_2[7u];
let l_1296 = l_1295 + l_1294;
a_2[7u] = l_1296;
let l_1297 = 7u * 2u;
let l_1298 = l_1297 + 1u;
let l_1299 = a_76[l_1298];
let l_1300 = 1u * 16u;
let l_1301 = l_1300 + 0u;
let l_1302 = l_1301 + l_283;
let l_1303 = subgroupBroadcast(l_1229, l_1302);
let l_1304 = l_1299 * l_1303;
let l_1305 = l_1304;
let l_1306 = a_2[0u];
let l_1307 = l_1306 + l_1305;
a_2[0u] = l_1307;
let l_1308 = 1u * 16u;
let l_1309 = l_1308 + 1u;
let l_1310 = l_1309 + l_283;
let l_1311 = subgroupBroadcast(l_1229, l_1310);
let l_1312 = l_1299 * l_1311;
let l_1313 = l_1312;
let l_1314 = a_2[1u];
let l_1315 = l_1314 + l_1313;
a_2[1u] = l_1315;
let l_1316 = 1u * 16u;
let l_1317 = l_1316 + 2u;
let l_1318 = l_1317 + l_283;
let l_1319 = subgroupBroadcast(l_1229, l_1318);
let l_1320 = l_1299 * l_1319;
let l_1321 = l_1320;
let l_1322 = a_2[2u];
let l_1323 = l_1322 + l_1321;
a_2[2u] = l_1323;
let l_1324 = 1u * 16u;
let l_1325 = l_1324 + 3u;
let l_1326 = l_1325 + l_283;
let l_1327 = subgroupBroadcast(l_1229, l_1326);
let l_1328 = l_1299 * l_1327;
let l_1329 = l_1328;
let l_1330 = a_2[3u];
let l_1331 = l_1330 + l_1329;
a_2[3u] = l_1331;
let l_1332 = 1u * 16u;
let l_1333 = l_1332 + 4u;
let l_1334 = l_1333 + l_283;
let l_1335 = subgroupBroadcast(l_1229, l_1334);
let l_1336 = l_1299 * l_1335;
let l_1337 = l_1336;
let l_1338 = a_2[4u];
let l_1339 = l_1338 + l_1337;
a_2[4u] = l_1339;
let l_1340 = 1u * 16u;
let l_1341 = l_1340 + 5u;
let l_1342 = l_1341 + l_283;
let l_1343 = subgroupBroadcast(l_1229, l_1342);
let l_1344 = l_1299 * l_1343;
let l_1345 = l_1344;
let l_1346 = a_2[5u];
let l_1347 = l_1346 + l_1345;
a_2[5u] = l_1347;
let l_1348 = 1u * 16u;
let l_1349 = l_1348 + 6u;
let l_1350 = l_1349 + l_283;
let l_1351 = subgroupBroadcast(l_1229, l_1350);
let l_1352 = l_1299 * l_1351;
let l_1353 = l_1352;
let l_1354 = a_2[6u];
let l_1355 = l_1354 + l_1353;
a_2[6u] = l_1355;
let l_1356 = 1u * 16u;
let l_1357 = l_1356 + 7u;
let l_1358 = l_1357 + l_283;
let l_1359 = subgroupBroadcast(l_1229, l_1358);
let l_1360 = l_1299 * l_1359;
let l_1361 = l_1360;
let l_1362 = a_2[7u];
let l_1363 = l_1362 + l_1361;
a_2[7u] = l_1363;
}
l_mut_35 = l_mut_35 + 16u;
l_mut_50 = l_mut_50 + 16u;
}
let l_1364 = 64u * local_invocation_id.y;
let l_1366 = l_1364 + 64u;
let slice_1367_offset = l_1364;
let slice_1367_length = l_1366 - l_1364;
let slice_1367_ptr = &shared_memory_1365;
let l_1368 = local_invocation_id.x / 2u;
let l_1369 = l_1368 * 16u;
let l_1370 = l_1369 / 4u;
let l_1371 = local_invocation_id.x % 2u;
let l_1372 = l_1371 * 2u;
let l_1373 = l_1370 + l_1372;
let l_1375 = 0u * 4u;
let l_1376 = l_1375 + 0u;
let l_1377 = a_2[l_1376];
let l_1378 = l_1377;
l_mut_1374[0u] = l_1378;
let l_1379 = 0u * 4u;
let l_1380 = l_1379 + 1u;
let l_1381 = a_2[l_1380];
let l_1382 = l_1381;
l_mut_1374[1u] = l_1382;
let l_1383 = 0u * 4u;
let l_1384 = l_1383 + 2u;
let l_1385 = a_2[l_1384];
let l_1386 = l_1385;
l_mut_1374[2u] = l_1386;
let l_1387 = 0u * 4u;
let l_1388 = l_1387 + 3u;
let l_1389 = a_2[l_1388];
let l_1390 = l_1389;
l_mut_1374[3u] = l_1390;
let l_1391 = 0u + l_1373;
(*slice_1367_ptr)[l_1391 + slice_1367_offset] = l_mut_1374;
let l_1392 = 1u * 4u;
let l_1393 = l_1392 + 0u;
let l_1394 = a_2[l_1393];
let l_1395 = l_1394;
l_mut_1374[0u] = l_1395;
let l_1396 = 1u * 4u;
let l_1397 = l_1396 + 1u;
let l_1398 = a_2[l_1397];
let l_1399 = l_1398;
l_mut_1374[1u] = l_1399;
let l_1400 = 1u * 4u;
let l_1401 = l_1400 + 2u;
let l_1402 = a_2[l_1401];
let l_1403 = l_1402;
l_mut_1374[2u] = l_1403;
let l_1404 = 1u * 4u;
let l_1405 = l_1404 + 3u;
let l_1406 = a_2[l_1405];
let l_1407 = l_1406;
l_mut_1374[3u] = l_1407;
let l_1408 = 1u + l_1373;
(*slice_1367_ptr)[l_1408 + slice_1367_offset] = l_mut_1374;

for (var l_mut_1409: u32 = 0u; l_mut_1409 < 2u; l_mut_1409++) {
let l_1410 = local_invocation_id.x * 4u;
let l_1411 = l_mut_1409 * 128u;
let l_1412 = l_1410 + l_1411;
let l_1413 = l_1412 / 4u;
let l_1414 = (*slice_1367_ptr)[l_1413+slice_1367_offset];
let l_1415 = local_invocation_id.y * 16u;
let l_1416 = l_1412 / 16u;
let l_1417 = l_1415 + l_1416;
let l_1418 = l_1417 + l_mut_65;
let l_1419 = 0u * 16u;
let l_1420 = l_1412 % 16u;
let l_1421 = l_1419 + l_1420;
let l_1422 = l_1421 + l_mut_66;
let l_1423 = l_1418 * l_mut_67;
let l_1424 = l_1422 * l_mut_68;
let l_1425 = l_1423 + l_1424;
let l_1426 = l_1425 + l_mut_71;
let l_1427 = l_1426 / 4u;
buffer_2_global[l_1427] = l_1414;
}
}

