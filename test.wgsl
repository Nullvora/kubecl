
@group(0)
@binding(0)
var<storage, read_write> input_0_global: array<f32>;

@group(0)
@binding(1)
var<storage, read_write> input_1_global: array<vec4<f32>>;

@group(0)
@binding(2)
var<storage, read_write> output_0_global: array<vec4<f32>>;

@group(0)
@binding(3)
var<storage, read_write> info: array<u32>;

var<workgroup> shared_memory_0: array<vec4<f32>, 512>;

var<workgroup> shared_memory_1: array<vec4<f32>, 512>;

const WORKGROUP_SIZE_X = 16u;
const WORKGROUP_SIZE_Y = 16u;
const WORKGROUP_SIZE_Z = 1u;

@compute
@workgroup_size(16, 16, 1)
fn main(
    @builtin(local_invocation_index) local_idx: u32,
    @builtin(workgroup_id) workgroup_id: vec3<u32>,
) {var a_0_0: array<f32, 16>;

    let rank: u32 = info[0];
    let rank_2: u32 = rank * 2u;
    var l_0_0: u32;
    var l_0_1: u32;
    var l_0_2: u32;
    var l_0_3: u32;
    var l_0_4: u32;
    var l_0_5: u32;
    var l_0_6: u32;
    var l_0_7: u32;
    var l_0_8: u32;
    var l_0_9: u32;
    var l_0_10: u32;
    var l_0_11: u32;
    var l_0_12: u32;
    var l_0_13: u32;
    var l_0_14: u32;
    var l_0_15: u32;
    var l_0_16: u32;
    var l_0_17: u32;
    var l_0_18: u32;
    var l_0_19: u32;
    var l_0_20: u32;
    var l_0_21: u32;
    var l_0_22: bool;
    var l_0_23: u32;
    var l_0_24: u32;
    var l_0_25: u32;
    var l_0_26: vec4<f32>;
    var l_0_27: u32;
    var l_0_28: f32;
    var l_0_29: u32;
    var l_0_30: vec4<f32>;
    var l_0_31: u32;
    var l_0_32: u32;
    var l_0_33: u32;
    var l_0_34: u32;
    var l_0_35: u32;
    var l_0_36: u32;
    var l_0_37: f32;
    var l_0_38: f32;
    var l_0_39: f32;
    var l_0_40: f32;
    var l_0_41: u32;
    var l_0_42: u32;
    var l_0_43: u32;
    var l_0_44: u32;
    var l_0_45: vec4<f32>;
    l_0_0 = rank - 2u;
    l_0_1 = rank - 1u;
    l_0_2 = info[(0u * rank_2) + rank + l_0_0 + 1u];
    l_0_3 = info[(0u * rank_2) + rank + l_0_1 + 1u];
    l_0_4 = info[(1u * rank_2) + rank + l_0_1 + 1u];
    l_0_5 = workgroup_id.x * 64u;
    l_0_6 = workgroup_id.y * 64u;
    l_0_7 = local_idx / 16u;
    l_0_7 = l_0_7 * 4u;
    l_0_8 = local_idx % 16u;
    l_0_8 = l_0_8 * 4u;
    l_0_9 = rank - 2u;
    l_0_10 = info[(0u * rank_2) + rank + l_0_9 + 1u];
    l_0_9 = rank - 1u;
    l_0_11 = info[(1u * rank_2) + rank + l_0_9 + 1u];
    l_0_9 = l_0_10 * l_0_11;
    l_0_9 = l_0_9 * workgroup_id.z;
    l_0_12 = u32(0u);
    l_0_12 = u32(0u);
    l_0_12 = rank - 2u;

    for (var l_1_0: u32 = 0u; l_1_0 < l_0_12; l_1_0++) {
        l_0_13 = info[(2u * rank_2) + l_1_0 + 1u];
        l_0_14 = l_0_9 / l_0_13;
        l_0_15 = info[(0u * rank_2) + rank + l_1_0 + 1u];
        l_0_16 = l_0_14 % l_0_15;
        l_0_15 = info[(0u * rank_2) + l_1_0 + 1u];
        l_0_16 = l_0_16 * l_0_15;
        l_0_13 = l_0_13 + l_0_16;
        l_0_15 = info[(1u * rank_2) + rank + l_1_0 + 1u];
        l_0_17 = l_0_14 % l_0_15;
        l_0_15 = info[(1u * rank_2) + l_1_0 + 1u];
        l_0_17 = l_0_17 * l_0_15;
        l_0_16 = l_0_16 + l_0_17;
    }
    a_0_0[0u] = f32(0f);
    a_0_0[1u] = f32(0f);
    a_0_0[2u] = f32(0f);
    a_0_0[3u] = f32(0f);
    a_0_0[4u] = f32(0f);
    a_0_0[5u] = f32(0f);
    a_0_0[6u] = f32(0f);
    a_0_0[7u] = f32(0f);
    a_0_0[8u] = f32(0f);
    a_0_0[9u] = f32(0f);
    a_0_0[10u] = f32(0f);
    a_0_0[11u] = f32(0f);
    a_0_0[12u] = f32(0f);
    a_0_0[13u] = f32(0f);
    a_0_0[14u] = f32(0f);
    a_0_0[15u] = f32(0f);
    l_0_12 = l_0_3 + 32u;
    l_0_12 = l_0_12 - 1u;
    l_0_12 = l_0_12 / 32u;

    for (var l_1_0: u32 = 0u; l_1_0 < l_0_12; l_1_0++) {
        l_0_18 = l_1_0 * 32u;
        l_0_19 = l_0_5 * l_0_3;
        l_0_19 = l_0_19 + l_0_18;
        l_0_19 = l_0_19 + l_0_17;
        l_0_20 = l_0_7 * l_0_3;
        l_0_20 = l_0_20 + l_0_8;
        l_0_20 = l_0_20 + l_0_19;
        l_0_21 = l_0_8 * 64u;
        l_0_21 = l_0_21 + l_0_7;
        l_0_22 = l_0_8 < 32u;
        if l_0_22 {
            l_0_23 = l_0_20 + 0u;
            l_0_24 = 0u * 64u;
            l_0_25 = l_0_21 + l_0_24;
            l_0_25 = l_0_25 / 4u;
            l_0_26 = vec4(
                f32(0f),
                f32(0f),
                f32(0f),
                f32(0f),
            );
            l_0_24 = 0u * l_0_3;
            l_0_27 = l_0_23 + l_0_24;
            l_0_28 = input_0_global[l_0_27];
            l_0_26[0u] = f32(l_0_28);
            l_0_27 = 1u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[1u] = f32(l_0_28);
            l_0_27 = 2u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[2u] = f32(l_0_28);
            l_0_27 = 3u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[3u] = f32(l_0_28);
            shared_memory_0[l_0_25] = vec4<f32>(l_0_26);
            l_0_27 = l_0_20 + 1u;
            l_0_24 = 1u * 64u;
            l_0_29 = l_0_21 + l_0_24;
            l_0_29 = l_0_29 / 4u;
            l_0_30 = vec4(
                f32(0f),
                f32(0f),
                f32(0f),
                f32(0f),
            );
            l_0_25 = 0u * l_0_3;
            l_0_24 = l_0_23 + l_0_25;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[0u] = f32(l_0_28);
            l_0_25 = 1u * l_0_3;
            l_0_24 = l_0_23 + l_0_25;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[1u] = f32(l_0_28);
            l_0_25 = 2u * l_0_3;
            l_0_24 = l_0_23 + l_0_25;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[2u] = f32(l_0_28);
            l_0_25 = 3u * l_0_3;
            l_0_24 = l_0_23 + l_0_25;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[3u] = f32(l_0_28);
            shared_memory_0[l_0_29] = vec4<f32>(l_0_30);
            l_0_25 = l_0_20 + 2u;
            l_0_27 = 2u * 64u;
            l_0_24 = l_0_21 + l_0_27;
            l_0_27 = l_0_24 / 4u;
            l_0_26 = vec4(
                f32(0f),
                f32(0f),
                f32(0f),
                f32(0f),
            );
            l_0_29 = 0u * l_0_3;
            l_0_24 = l_0_23 + l_0_29;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[0u] = f32(l_0_28);
            l_0_29 = 1u * l_0_3;
            l_0_24 = l_0_23 + l_0_29;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[1u] = f32(l_0_28);
            l_0_29 = 2u * l_0_3;
            l_0_24 = l_0_23 + l_0_29;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[2u] = f32(l_0_28);
            l_0_29 = 3u * l_0_3;
            l_0_24 = l_0_23 + l_0_29;
            l_0_28 = input_0_global[l_0_24];
            l_0_26[3u] = f32(l_0_28);
            shared_memory_0[l_0_27] = vec4<f32>(l_0_26);
            l_0_29 = l_0_20 + 3u;
            l_0_25 = 3u * 64u;
            l_0_24 = l_0_21 + l_0_25;
            l_0_25 = l_0_24 / 4u;
            l_0_30 = vec4(
                f32(0f),
                f32(0f),
                f32(0f),
                f32(0f),
            );
            l_0_27 = 0u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[0u] = f32(l_0_28);
            l_0_27 = 1u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[1u] = f32(l_0_28);
            l_0_27 = 2u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[2u] = f32(l_0_28);
            l_0_27 = 3u * l_0_3;
            l_0_24 = l_0_23 + l_0_27;
            l_0_28 = input_0_global[l_0_24];
            l_0_30[3u] = f32(l_0_28);
            shared_memory_0[l_0_25] = vec4<f32>(l_0_30);
        }
        l_0_27 = l_0_18 * l_0_4;
        l_0_24 = l_0_6 + l_0_27;
        l_0_27 = l_0_24 + l_0_15;
        l_0_24 = l_0_7 * l_0_4;
        l_0_24 = l_0_24 + l_0_8;
        l_0_24 = l_0_24 + l_0_27;
        l_0_31 = l_0_7 * 64u;
        l_0_31 = l_0_31 + l_0_8;
        l_0_22 = l_0_7 < 32u;
        if l_0_22 {
            l_0_32 = 0u * l_0_4;
            l_0_33 = l_0_24 + l_0_32;
            l_0_33 = l_0_33 / 4u;
            l_0_32 = 0u * 64u;
            l_0_34 = l_0_31 + l_0_32;
            l_0_34 = l_0_34 / 4u;
            l_0_26 = input_1_global[l_0_33];
            shared_memory_1[l_0_34] = vec4<f32>(l_0_26);
            l_0_32 = 1u * l_0_4;
            l_0_35 = l_0_24 + l_0_32;
            l_0_35 = l_0_35 / 4u;
            l_0_32 = 1u * 64u;
            l_0_36 = l_0_31 + l_0_32;
            l_0_36 = l_0_36 / 4u;
            l_0_26 = input_1_global[l_0_33];
            shared_memory_1[l_0_36] = vec4<f32>(l_0_26);
            l_0_34 = 2u * l_0_4;
            l_0_32 = l_0_24 + l_0_34;
            l_0_34 = l_0_32 / 4u;
            l_0_35 = 2u * 64u;
            l_0_32 = l_0_31 + l_0_35;
            l_0_35 = l_0_32 / 4u;
            l_0_26 = input_1_global[l_0_33];
            shared_memory_1[l_0_35] = vec4<f32>(l_0_26);
            l_0_36 = 3u * l_0_4;
            l_0_32 = l_0_24 + l_0_36;
            l_0_36 = l_0_32 / 4u;
            l_0_34 = 3u * 64u;
            l_0_32 = l_0_31 + l_0_34;
            l_0_34 = l_0_32 / 4u;
            l_0_26 = input_1_global[l_0_33];
            shared_memory_1[l_0_34] = vec4<f32>(l_0_26);
        }
        workgroupBarrier();

        for (var l_2_0: u32 = 0u; l_2_0 < 32u; l_2_0++) {
            l_0_35 = l_2_0 * 64u;
            l_0_32 = l_0_7 + l_0_35;
            l_0_35 = l_0_32 / 4u;
            l_0_28 = shared_memory_0[l_0_35];
            l_0_35 = l_2_0 * 64u;
            l_0_32 = l_0_8 + l_0_35;
            l_0_35 = l_0_32 / 4u;
            l_0_37 = shared_memory_1[l_0_35];
            l_0_35 = 0u * 4u;
            l_0_38 = l_0_28[0u];
            l_0_39 = l_0_37[0u];
            l_0_38 = l_0_38 * l_0_39;
            l_0_32 = l_0_35 + 0u;
            l_0_39 = a_0_0[l_0_32];
            l_0_39 = l_0_39 + l_0_38;
            l_0_32 = l_0_35 + 0u;
            a_0_0[l_0_32] = f32(l_0_39);
            l_0_39 = l_0_28[0u];
            l_0_40 = l_0_37[1u];
            l_0_39 = l_0_39 * l_0_40;
            l_0_32 = l_0_35 + 1u;
            l_0_40 = a_0_0[l_0_32];
            l_0_40 = l_0_40 + l_0_39;
            l_0_32 = l_0_35 + 1u;
            a_0_0[l_0_32] = f32(l_0_40);
            l_0_40 = l_0_28[0u];
            l_0_38 = l_0_37[2u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_32 = l_0_35 + 2u;
            l_0_39 = a_0_0[l_0_32];
            l_0_39 = l_0_39 + l_0_40;
            l_0_32 = l_0_35 + 2u;
            a_0_0[l_0_32] = f32(l_0_39);
            l_0_39 = l_0_28[0u];
            l_0_38 = l_0_37[3u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_32 = l_0_35 + 3u;
            l_0_40 = a_0_0[l_0_32];
            l_0_40 = l_0_40 + l_0_39;
            l_0_32 = l_0_35 + 3u;
            a_0_0[l_0_32] = f32(l_0_40);
            l_0_32 = 1u * 4u;
            l_0_40 = l_0_28[1u];
            l_0_38 = l_0_37[0u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_35 = l_0_32 + 0u;
            l_0_39 = a_0_0[l_0_35];
            l_0_39 = l_0_39 + l_0_40;
            l_0_35 = l_0_32 + 0u;
            a_0_0[l_0_35] = f32(l_0_39);
            l_0_39 = l_0_28[1u];
            l_0_38 = l_0_37[1u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_35 = l_0_32 + 1u;
            l_0_40 = a_0_0[l_0_35];
            l_0_40 = l_0_40 + l_0_39;
            l_0_35 = l_0_32 + 1u;
            a_0_0[l_0_35] = f32(l_0_40);
            l_0_40 = l_0_28[1u];
            l_0_38 = l_0_37[2u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_35 = l_0_32 + 2u;
            l_0_39 = a_0_0[l_0_35];
            l_0_39 = l_0_39 + l_0_40;
            l_0_35 = l_0_32 + 2u;
            a_0_0[l_0_35] = f32(l_0_39);
            l_0_39 = l_0_28[1u];
            l_0_38 = l_0_37[3u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_35 = l_0_32 + 3u;
            l_0_40 = a_0_0[l_0_35];
            l_0_40 = l_0_40 + l_0_39;
            l_0_35 = l_0_32 + 3u;
            a_0_0[l_0_35] = f32(l_0_40);
            l_0_35 = 2u * 4u;
            l_0_40 = l_0_28[2u];
            l_0_38 = l_0_37[0u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_32 = l_0_35 + 0u;
            l_0_39 = a_0_0[l_0_32];
            l_0_39 = l_0_39 + l_0_40;
            l_0_32 = l_0_35 + 0u;
            a_0_0[l_0_32] = f32(l_0_39);
            l_0_39 = l_0_28[2u];
            l_0_38 = l_0_37[1u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_32 = l_0_35 + 1u;
            l_0_40 = a_0_0[l_0_32];
            l_0_40 = l_0_40 + l_0_39;
            l_0_32 = l_0_35 + 1u;
            a_0_0[l_0_32] = f32(l_0_40);
            l_0_40 = l_0_28[2u];
            l_0_38 = l_0_37[2u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_32 = l_0_35 + 2u;
            l_0_39 = a_0_0[l_0_32];
            l_0_39 = l_0_39 + l_0_40;
            l_0_32 = l_0_35 + 2u;
            a_0_0[l_0_32] = f32(l_0_39);
            l_0_39 = l_0_28[2u];
            l_0_38 = l_0_37[3u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_32 = l_0_35 + 3u;
            l_0_40 = a_0_0[l_0_32];
            l_0_40 = l_0_40 + l_0_39;
            l_0_32 = l_0_35 + 3u;
            a_0_0[l_0_32] = f32(l_0_40);
            l_0_32 = 3u * 4u;
            l_0_40 = l_0_28[3u];
            l_0_38 = l_0_37[0u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_35 = l_0_32 + 0u;
            l_0_39 = a_0_0[l_0_35];
            l_0_39 = l_0_39 + l_0_40;
            l_0_35 = l_0_32 + 0u;
            a_0_0[l_0_35] = f32(l_0_39);
            l_0_39 = l_0_28[3u];
            l_0_38 = l_0_37[1u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_35 = l_0_32 + 1u;
            l_0_40 = a_0_0[l_0_35];
            l_0_40 = l_0_40 + l_0_39;
            l_0_35 = l_0_32 + 1u;
            a_0_0[l_0_35] = f32(l_0_40);
            l_0_40 = l_0_28[3u];
            l_0_38 = l_0_37[2u];
            l_0_40 = l_0_40 * l_0_38;
            l_0_35 = l_0_32 + 2u;
            l_0_39 = a_0_0[l_0_35];
            l_0_39 = l_0_39 + l_0_40;
            l_0_35 = l_0_32 + 2u;
            a_0_0[l_0_35] = f32(l_0_39);
            l_0_39 = l_0_28[3u];
            l_0_38 = l_0_37[3u];
            l_0_39 = l_0_39 * l_0_38;
            l_0_35 = l_0_32 + 3u;
            l_0_40 = a_0_0[l_0_35];
            l_0_40 = l_0_40 + l_0_39;
            l_0_35 = l_0_32 + 3u;
            a_0_0[l_0_35] = f32(l_0_40);
        }
        workgroupBarrier();
    }
    l_0_35 = l_0_5 + l_0_7;
    l_0_41 = l_0_6 + l_0_8;
    l_0_42 = l_0_35 * l_0_4;
    l_0_42 = l_0_42 + l_0_41;
    l_0_42 = l_0_42 + l_0_9;
    l_0_43 = 0u * l_0_4;
    l_0_42 = l_0_42 + l_0_43;
    l_0_43 = 0u * 4u;
    l_0_26 = vec4(
        f32(0f),
        f32(0f),
        f32(0f),
        f32(0f),
    );
    l_0_44 = l_0_43 + 0u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[0u] = f32(l_0_40);
    l_0_44 = l_0_43 + 1u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[1u] = f32(l_0_40);
    l_0_44 = l_0_43 + 2u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[2u] = f32(l_0_40);
    l_0_44 = l_0_43 + 3u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[3u] = f32(l_0_40);
    l_0_44 = l_0_42 / 4u;
    output_0_global[l_0_44] = vec4<f32>(l_0_26);
    l_0_45 = vec4(
        f32(0f),
        f32(0f),
        f32(0f),
        f32(0f),
    );
    l_0_44 = l_0_43 + 0u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[0u] = f32(l_0_40);
    l_0_44 = l_0_43 + 1u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[1u] = f32(l_0_40);
    l_0_44 = l_0_43 + 2u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[2u] = f32(l_0_40);
    l_0_44 = l_0_43 + 3u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[3u] = f32(l_0_40);
    l_0_44 = l_0_42 / 4u;
    output_0_global[l_0_44] = vec4<f32>(l_0_45);
    l_0_26 = vec4(
        f32(0f),
        f32(0f),
        f32(0f),
        f32(0f),
    );
    l_0_44 = l_0_43 + 0u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[0u] = f32(l_0_40);
    l_0_44 = l_0_43 + 1u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[1u] = f32(l_0_40);
    l_0_44 = l_0_43 + 2u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[2u] = f32(l_0_40);
    l_0_44 = l_0_43 + 3u;
    l_0_40 = a_0_0[l_0_44];
    l_0_26[3u] = f32(l_0_40);
    l_0_44 = l_0_42 / 4u;
    output_0_global[l_0_44] = vec4<f32>(l_0_26);
    l_0_45 = vec4(
        f32(0f),
        f32(0f),
        f32(0f),
        f32(0f),
    );
    l_0_44 = l_0_43 + 0u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[0u] = f32(l_0_40);
    l_0_44 = l_0_43 + 1u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[1u] = f32(l_0_40);
    l_0_44 = l_0_43 + 2u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[2u] = f32(l_0_40);
    l_0_44 = l_0_43 + 3u;
    l_0_40 = a_0_0[l_0_44];
    l_0_45[3u] = f32(l_0_40);
    l_0_44 = l_0_42 / 4u;
    output_0_global[l_0_44] = vec4<f32>(l_0_45);
}
